How to watch your money count - Cloudwatch -> Alerts -> billing -> create alarm -> select metric -> for 1 service or all -> set threshold -> notification rate -> enter your mail -> verify it -> name of the alarm -> preview -> create alarm!
IAM - Identity and Access Management - настройка пользованием сервисами. Создание акков, групп акков, создание ролей и настройка полномочий
    Root пользователь - основа, заправляет всем. IAM пользователь имеет доступ не ко всему. Ему нужно получить доступ к сервисам от рут пользователя. Рекомендуется не использовать рут акк как основной. Лучше создать iam аккаунт с правами админа.
    При создании пользователей лучше всего создавать группы с привязанными к ним полиси, и назначать новых пользователей в определенную группу.
    Роли используется для того, чтобы открыть доступ сервису А к сервису Б. Например у сервиса ec2 доступ к сервису s3
VPC - Virtual Private Cloud - регулировка и контроль доступа в интернет для используемых сервисов
      Когда мы создаем аккаунт авс, создается и частная сеть и определенными настройками. В ЧС мы можем наблюдать список частных сетей, а во вкладке Internet gateways - шлюзы для каждой сети.
      Шлюзы(gateways) обеспецивают выход в интернет. Если в пределах частной сети находятся активные процессы(инстанс ec2, например), то шлюз не может быть откреплен
      Route tables(Таблицы маршрутов) - набор правил и алгоритмов, который определяют то, куда отправлять траффик, если он находится в пределах vpc, т.е. остаться ли данным в частной сети, или выйти уже в интернет шлюз. Таблица с дефолтными настройками прикрепляется при создании vpc. Шлюзы напрямую связаны с таблицами. У одной таблицы по дефолту прикреплен локальный шлюз, плюс шлюз с айпи адресом(0.0.0.0/0). Вот он как раз и прикреплен к гейтвею. Этот маршрут будет вести в никуда если открепить гейтвей. Также гейтвей можно сменить.
      Network Access Control List - уровень защиты для впс, работающий по принципу файервола. Создается в момент создания впс. Можно регулировать inbound/outbound rules. Их 2 по умолчанию. У первого правила номер 100. У второго - * и оно юзается после всех правил(если не попало не под одно до этого) и блокирует траффик.
      Сеть АВС делится на регионы, в каждом регионе есть несколько зон доступа. ПВС распологается на всех зонах доступа одновременно. Для каждой зоны доступа в пределах региона можно создать одну, либо более подсетей. Когда создается ВПС, он автоматом создает одну подсеть для каждой зоны доступа. Подсетей два типа: частная и общественная. Отличаются таблицами маршрутов. Частные не могут выходит в инет. В подсетях выполняются процессы АВС, к примеру инстансы ec2 и rds. Если одна подсеть накрылась, другие ее заменят
EC2 - Elastic Compute Cloud - виртуальный сервер, который предлагает к использованию удаленную вычислительную мощь.
      ОС - AMI(Amazon machine image) - не равно ОС, поскольку помимо ОС включает в себя программы, настройки и т.д. На одном ami может быть >1 инстанса. Перед тем, запустить инстанс, нужно выбрать АМИ. Существуют образы на базе линукса, убунту, винды. В описании АМИ написано, какие инструменты идут вместе с ним. Есть 3 категории АМИ: My AMI's, AWS Marketplace, Community AMIs
      Процессор - инстанс
      Жесткий диск - EBS(Elastic Block Store) - долговременная память для инстанса ec2. СУществует количтсво входящих/исходящих операций в секунду, оно определяет скорость работы инстанса с ebs(Можно провести аналогию работы процессора с жестким диском ). Базовый EBS - General purpose SSD(10000 iops). Provisioned -20000 iops. Также есть HDD диски
      Оперативная память - опер. память ec2
      Файервол - группы безопасности
      Сетевой адаптер - IP-адресация
S3 - Simple Storage Service - сервис хранения объектов любого типа, который позволяет загружать туда файлы, и позже получать к ним доступ.
     На верхнем уровне С3 мы создаем бакеты, которые являются корневой папкой внутри хранилища, в которые мы можем напрямую загружать файлы, а также создавать папки внутри и загружать файлы в них. При загрузке файла мы настриваем уровни доступа, харакетеристки и настройки этого файла, такие как: Класс хранилища, возможность шифрования, тэги.
     Классы хранилища - различные алгоритмы хранения в системе с3. Отличаются стоимостью, временем для получения доступа и предназначением. Standard(универсальное хранилище для всех типов данных, частый доступ к файлам), Intelligent-Tiering(изменяющаяся частота доступа к файлам, са м может переместить файлы в дргуие классы), Standard-Infrequent Access(Очень быстрый доступ к файлам, к которым обращаются редко), One Zone-Infrequent Access(редко ), Glacier - долгосрочное хранение данных в архиве(отличаются временем извлечения файлов)
     Правила жизенного цикла файла. Основная цель - снижение стоимости хранения за счет перемещение файла по разным классам хранилища. Одна политика жизненного цикла может быть применена ко всему бакету, к определенной папке, либо только к файлу.
     Права доступа - управление правами просмотра файлов и бакетов. Можно настраивать как для отдельных файлов, так и для бакетов.(Есть наборы правил - Access control list), List Objects(sees name of files, but can't access), Write Objects(Can read/write), Write/Read Buckets(Only write for objects(files)) permissions. Можно просто разрешить публичный доступ к файлу/бакету, но не желательно
     Контроль версий файлов - инструмент по сохранению версий одного и того же файла. Если включил, то выключить нельзя, только приостановить. Все последующие версии записываться не будут, но предыдущие останутся
RDS - Relational Database Service - сервис по настройке, использованию и масштабированию реляционных баз данных в облаке(для нереляционных баз есть DynamoDB, там запись идет в виде документа с парами ключ-значение). Есть несколько шаблонов использования: для прода, разработки и тестирования и пробный-бесплатный. Цены исходят от типов. Есть Инстансы БД по требованию(позволяют оплачивать вычисления на почасовой основе, запуская и останавливая инстанс, т.е. платишь только за время работы) и зарезервированные инстансы(Оплачиваются стабильно и работают постоянно)
          Лучше всего разворачивать базы данных в частных подсетях(те, у которых в таблице маршрутов нет выхода в интернет шлюз). Также у инстансов РДС должна быть налажена работа с группами безопасности, если не будут насроены правильно, то может нарушиться работы ес2 и рдс, поэтому нужно правильно настроить порты. Например у амазон аврора порты 3306, поэтому и вгруппе безопасности и в списке контроля должен быть открыт этот порт. Тунелирование SSH: чтобы у разработчиков была налажена связь с инстансом рдс.
          Правильно настроенный тунель будет направлять трафик SSH из интернета -> интернет шлюз -> таблица маршрутов -> общественная подсеть через список контроля доступа к сетям -> группа безопасности. После этого трафик переходит в частную таблицу маршрутов, которая нправит егро через группу безопасности в частную подсеть, где распологается инстанс рдс
            -- Launch, etc. --
SNS - Simple Notification Service - сервис уведомлений, нужен для автоматизации отправки сообщений или емейлов по настроенным событиям. Пример использования: CloudWatch следит за состоянием инстанса ec2 и в случае неполадок, тригерит СНС, который оптравляет уведомление пользователю. Сервис работает по принципу издатель-подписчик. Подписчиком выступает AWS Lambda, Amazon SQS, HTTP/S, Email.
      Для уведомлений нужна тема и подписка.
      Есть два типа тем: FIFO(first in - first out), Standard. Отличаются количеством сообщений, и протоколами подписки(SQS only vs Lambda, SMS, HTTP, email etc.)
      В настройках топиков есть следующие опции: шифрование(сообщение шифруется при получении и дешифруется при открытии), политика доступа(есть онсновной и продувинутый варианты. В них можно определять, кто имеет доступ к теме), так же можно настраивать повторную отправку сообщений и логгирование доставки
CloudWatch - сервис который помогает вести наблюдение приложений, сервисов(EC2, S3), регирование на изменение в производительности систем, получения сведений о работоспособности систем
CloudTrail - сервис, позволяющий отслеживать все действия, которые происходят на аккаунте в AWS. По сути служит историей аккаунта, включая действия, выполненные с помощью консоли управления AWS, SDK AWS и других сервисов. К примеру если кто остановил инстанс ес2, удалил бд, какое-действие происходит в CloudWatch, то оно автоматом логгируется в CloudTrail в С3 бакет в формате gzip
             Есть два типа событий, которые будут логгироваться: События Управления(действия в отношении ресурсов аккаунта AWS, к примеру запуск инстанса, вызов апи, создание с3 бакетов) и события, связанные с данными(содержат данные о выполненных действиях с помощью ресурса)
ELB - сервис, позволяющий равномерно распределять трафик поступающий из интернета между инстансами ec2.
Route 53 - ДНС веб сервис. 3 главные задачи: регистрация доменных имен, направление интернет траффика к ресурсам домена(Когда юзер открывает браузер и вбивает доменное/субдоменное имя, route 53 помогает соеденить браузер с сайтом, или веб приложением), Health Check ресурсов(посылает запросы ресурсу, для того чтобы убедистя, что он достигаем, доступен и фунционирует. Также позволяет отправлять уведомления, когда сервис становится недоступным)
AWS Lambda - сервис, позволяющий запускать програмный код без работающих серверов. Код запускается и выолняется автоматическое масштабирование в зависимости от нагрузки. Запускать функции можно с помощью AWS CLI, AWS Management Console, API Gateway, событий(например s3 bucket data change, DynamoDB update)
             Для того, чтобы создать функцию, нужно выбрать роль, у которой имеетя какие-то разрешения для лямбды(к примеру read-only s3, full_access s3). Если выбирать из существующих ролей, то нам нужна роль для Лямбды. Ее можно создать в IAM. Там прописываем пермишены. После этого роль можно будет выбрать из существующих. Далее выбираем язык(java, c#, python, node.js) и создаем.
             Далее следует выбрать триггеры выполнения функций(API Gateway, CodeCommit, S3), также нужно будет вставить код функции. Для примера можно сделать функцию, которая выводит список всех с3 бакетов. Все функции пишутся с помощью библиотеки boto3(Amazon AWS SDK). Функцию сохраняют и после этого ее можно протестить. Самый простой способ запуска - напрямую через амазон консоль, через клик "Test". Запуск с помощью AWS CLI(нужны права доступа лямбда). aws lambda invoke --function-name={FUNCTION NAME} --region={REGION} {OUTPUT FILE}
API Gateway + Lambda - Создаем новый апи, после этого создаем метод(ПОСТ, ГЕТ), где выбираем регион и саму функцию. Можно протестировать запрос, а можно сразу задеплоить. Для этого в Actions выбираем deploy api и нам дается url. Для использования гейтвея с токеном(это будет пост запрос), нужно создать API key, обязать функцию юзать апи токен и в usage plans(создаем план) синхронизировать токен(передаваемый в хедере) и функцию. Теперь через командную строку можно делать запрос: curl -X POST -H "x-api-key: {KEY_HERE}" {URL_OF_FUNCTION}
SES - Высокомасштабируемая служба электронной почты. Сервис используется приложениями, которым нужно  посылать емейлы.
      Есть два статуса СЭС:
      Sandbox - с ограничениями(200 писем в день только верефицированным адресам и доменам, 1 емейл каждую секунду)
      Production - нужно разрешение амазон, ограничений нет
      В СЕС все завязано на verified identities - где указываются емейлы и домены, с которых и на которые могут приходить письма. Verified, потому что каждый identity нужно подтверждать. Для емейлов это делается простой отправкой проверочного письма, а для доменных имен процесс следующий: Так как доменные имена с высокой вероятностью зарегестрированны в route53, мы просто указываем доменное имя, и дальше следует верификация, которая основывается на DKIM(DomainKeys Identified Mail) Делается это для того, чтобы пользоваетль не указал левый домен(к примеру microsoft.com). Требуется создать несколько рекордов CNAME типа с определенными именами и значениями, которые указаны на странице верификации. Просто переходим в route53 и кликаем на "Create Record". Дальше вбиваем record name, value, которые указаны на странице верефикации и выбираем тип CNAME. Дальше кликаем на create another record и вбиваем остальную инфу. После этого пройдет какое-то время и домен станет верефицированным.
      Получение емейлов доступно не во всех регионах. Для того, чтобы получать емейлы, нужно настроить email receiving. Для этого изначально создаем rule set, внутри которого можно устанавливать отдельные правила для отдельных групп получателей. К примеру: в дефолт rule set есть правило earth-gs-IncomeClaim, которое включает recipient conditions: 5 емейлов, и 2 Actions: отсылка полученного на эти конкретные адреса писем в отдельно установленные с3 бакеты + инвоук лямбды(к примеру авто-реплай).
      В SNS Можно настроить SNC Topic'и, то есть получение уведомлений о: bounce(email wasn't delivered), complaint(user unsubscribed/marked as spam etc.), delivery